import 'package:flutter/material.dart';
import 'hive_boxes.dart';
import 'models/skill.dart';
import 'models/session.dart';
import 'package:hive_flutter/hive_flutter.dart';

class SkillRepo {
  static final _box = HiveBoxes.skillBox();
  static final _sessionBox = Hive.box<Session>('sessions');

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏
  static List<Skill> getAll() => _box.values.toList();

  /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫
  static Future<void> addSkill({
    required String name,
    required double goalHours,
    required Color color,
    required IconData icon,
  }) async {
    final id = DateTime.now().millisecondsSinceEpoch;
    final skill = Skill(
      id: id,
      name: name,
      goalHours: goalHours,
      colorValue: color.value,
      iconCode: icon.codePoint,
      totalHours: 0,
      sessions: [],
      currentStreak: 1, // ‚úÖ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    );
    await _box.put(id, skill);
  }

  /// –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
  static Future<void> deleteSkill(int id) async {
    await _box.delete(id);
    final sessionsToDelete =
        _sessionBox.values.where((s) => s.skillId == id).toList();
    for (final s in sessionsToDelete) {
      await _sessionBox.delete(s.id);
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é (—á–µ—Ä–µ–∑ SessionTimerScreen)
  static Future<void> addSession({
    required int skillId,
    required double durationMinutes,
    String note = '',
  }) async {
    final skill = _box.get(skillId);
    if (skill == null) return;

    final now = DateTime.now();
    final sessionId = now.millisecondsSinceEpoch;

    final session = Session(
      id: sessionId,
      skillId: skillId,
      durationMinutes: durationMinutes,
      date: now,
      note: note.trim().isEmpty ? null : note.trim(),
    );

    // --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Hive ---
    await _sessionBox.put(sessionId, session);

    // --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å–∫–∏–ª–ª—É ---
    final updatedSessions = [...skill.sessions, session];

    // --- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º streak ---
    final newStreak = _calculateStreak(updatedSessions);

    // --- –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è ---
    final addedHours = durationMinutes / 60.0;

    final updated = Skill(
      id: skill.id,
      name: skill.name,
      goalHours: skill.goalHours,
      totalHours: skill.totalHours + addedHours,
      colorValue: skill.colorValue,
      iconCode: skill.iconCode,
      sessions: updatedSessions,
      currentStreak: newStreak,
    );

    await _box.put(skillId, updated);
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É —Å–µ—Å—Å–∏—é (–ø–æ –¥–æ–ª–≥–æ–º—É —Ç–∞–ø—É)
  static Future<void> deleteSession({
    required int skillId,
    required int sessionId,
  }) async {
    final skill = _box.get(skillId);
    if (skill == null) return;

    final session = skill.sessions.firstWhere(
      (s) => s.id == sessionId,
      orElse: () => Session(
        id: -1,
        skillId: skillId,
        durationMinutes: 0,
        date: DateTime.now(),
      ),
    );
    if (session.id == -1) return;

    // –£–¥–∞–ª—è–µ–º –∏–∑ –±–æ–∫—Å–∞ —Å–µ—Å—Å–∏–π
    await _sessionBox.delete(sessionId);

    final reducedHours = session.durationMinutes / 60.0;

    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Å—Å–∏–∏
    final remainingSessions =
        skill.sessions.where((s) => s.id != sessionId).toList();

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º streak –∑–∞–Ω–æ–≤–æ
    final newStreak = _calculateStreak(remainingSessions);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∞
    final updated = Skill(
      id: skill.id,
      name: skill.name,
      goalHours: skill.goalHours,
      totalHours: (skill.totalHours - reducedHours).clamp(0, double.infinity),
      colorValue: skill.colorValue,
      iconCode: skill.iconCode,
      sessions: remainingSessions,
      currentStreak: newStreak,
    );

    await _box.put(skillId, updated);
  }

  /// ===============================
  /// üßÆ –õ–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è streak
  /// ===============================
  static int _calculateStreak(List<Session> sessions) {
    if (sessions.isEmpty) return 1; // ‚úÖ –º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏ (—á—Ç–æ–±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –∑–∞ –¥–µ–Ω—å –Ω–µ –≤–ª–∏—è–ª–∏)
    final uniqueDays = <DateTime>{};
    for (final s in sessions) {
      final d = DateTime(s.date.year, s.date.month, s.date.day);
      uniqueDays.add(d);
    }

    // –°—á–∏—Ç–∞–µ–º streak –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    int streak = 0;
    DateTime cursor = DateTime.now();

    while (true) {
      final day = DateTime(cursor.year, cursor.month, cursor.day);
      if (uniqueDays.contains(day)) {
        streak++;
        cursor = day.subtract(const Duration(days: 1));
        continue;
      }
      break;
    }

    // ‚úÖ –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å (–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞)
    if (streak == 0) return 1;
    return streak;
  }
}